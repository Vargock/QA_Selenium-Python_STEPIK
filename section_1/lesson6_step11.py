from selenium import webdriver
from selenium.webdriver.common.by import By
from faker import Faker
import time

fake = Faker()

# –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
REQUIRED = {
    "first name": (
        "//div[@class='first_block']/div[contains(@class, 'first_class')]/input",
        fake.first_name(),
    ),
    "last name": (
        "//div[@class='first_block']/div[contains(@class, 'second_class')]/input",
        fake.last_name(),
    ),
    "email": (
        "//div[@class='first_block']/div[contains(@class, 'third_class')]/input",
        fake.email(),
    ),
}

# –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –∏ –∑–Ω–∞—á–µ–Ω–∏—è –¥–ª—è –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
OPTIONAL = {
    "phone": (
        "//div[@class='second_block']/div[contains(@class, 'first_class')]/input",
        fake.phone_number(),
    ),
    "address": (
        "//div[@class='second_block']/div[contains(@class, 'second_class')]/input",
        fake.street_address(),
    ),
}

# –¢–µ–∫—Å—Ç, –∏—Å–ø–æ–ª—å–∑—É—é—â–∏–π—Å—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ–π —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏
SUCCESS_TEXT = "Congratulations! You have successfully registered!"


# –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
def get_elements(browser):
    required_inputs = []
    optional_inputs = []

    # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    for label, (xpath, keys) in REQUIRED.items():
        try:
            element = browser.find_element(By.XPATH, xpath)
            required_inputs.append((element, keys, label))
        except Exception as e:
            print(f"\n‚ùå Search for an element {label}: {xpath} FAILED | LINE 50\n")
            raise e

    # –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è, –≤—ã–∑–≤–∞—Ç—å –æ—à–∏–±–∫—É, –µ—Å–ª–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ –ø–æ–ª–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    for label, (xpath, keys) in OPTIONAL.items():
        try:
            element = browser.find_element(By.XPATH, xpath)
            optional_inputs.append((element, keys, label))
        except Exception as e:
            print(f"\n‚ùå Search for an element {label}: {xpath} FAILED | LINE 60\n")
            raise e

    # –í—ã–≤–µ—Å—Ç–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö –ø–æ–ª—è—Ö –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
    print("\nRequired fields found:")
    for element, value, label in required_inputs:
        print(f" - {label}: {value} [{element}]")
    print("\nOptional fields found:")
    for element, value, label in optional_inputs:
        print(f" - {label}: {value} [{element}]")

    return required_inputs, optional_inputs


# –ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø–æ–ª—è –∑–Ω–∞—á–µ–Ω–∏—è–º–∏
def fill_inputs(inputs: list[tuple]):
    for input_field, keys, label in inputs:
        try:
            input_field.send_keys(keys)
        except Exception as e:
            print(f"\n‚ùå Attempt to fill input {label} has FAILED | LINE 81\n")
            raise e


# –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –≤ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö
def run_tests():
    for mode in ("required", "optional", "all"):
        print(f"\nüß™ Running test with mode: '{mode}'")
        # –û—Ç–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä
        browser = webdriver.Chrome()
        browser.get("https://suninjuly.github.io/registration1.html")

        # –ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª—è
        required, optional = get_elements(browser)

        try:
            # –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            if mode == "required":
                fill_inputs(required)
                expected_result = True
            # –ó–∞–ø–æ–ª–Ω–∏—Ç—å —Ç–æ–ª—å–∫–æ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è
            elif mode == "optional":
                fill_inputs(optional)
                expected_result = False
            # –ó–∞–ø–æ–ª–Ω–∏—Ç—å –≤—Å–µ –ø–æ–ª—è
            elif mode == "all":
                fill_inputs(required + optional)
                expected_result = True
            # –ù–µ–≤–µ—Ä–Ω—ã–π —Ä–µ–∂–∏–º: –≤—ã–±–µ—Ä–∏—Ç–µ 'required', 'optional' –∏–ª–∏ 'all'
            else:
                raise ValueError(
                    "Invalid mode: choose 'required', 'optional', or 'all'."
                )

            # –ù–∞–π—Ç–∏ –∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É "Submit"
            browser.find_element(
                By.XPATH, "//button[contains(text(), 'Submit')]"
            ).click()

            # –ü–æ–¥–æ–∂–¥–∞—Ç—å, –ø–æ–∫–∞ –∑–∞–≥—Ä—É–∑–∏—Ç—Å—è –Ω–æ–≤–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
            time.sleep(1)

            # –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–µ–∫—Å—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ
            welcome_text = browser.find_element(By.TAG_NAME, "h1").text
            if expected_result:
                assert welcome_text == SUCCESS_TEXT
            else:
                assert welcome_text != SUCCESS_TEXT

            print(f"‚úÖ Test passed for mode '{mode}' has SUCCEDED")
        except Exception as e:
            print(f"‚ùå Test failed for mode '{mode}' has FAILED")
            raise e
        # –ó–∞–∫—Ä—ã—Ç—å –±—Ä–∞—É–∑–µ—Ä
        finally:
            time.sleep(2)
            browser.quit()


if __name__ == "__main__":
    run_tests()
